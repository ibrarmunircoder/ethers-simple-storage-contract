const ethers = require("ethers")
const fs = require("fs")
const dotenv = require("dotenv")
const path = require("path")

const envPath = path.resolve(process.cwd(), ".env.development")

dotenv.config({
    path: envPath,
})

async function main() {
    const provider = new ethers.providers.JsonRpcBatchProvider(
        process.env.RPC_URL
    )
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
    // const encryptJson = fs.readFileSync("./encrypted.json", "utf-8")
    // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //     encryptJson,
    //     process.env.PRIVATE_KEY_PASSWORD
    // )
    // wallet = wallet.connect(provider)

    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.abi",
        "utf-8"
    )
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf-8"
    )
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet)
    console.log("Deploying Contract Please wait")
    const contract = await contractFactory.deploy()
    await contract.deployTransaction.wait(1)
    console.log(contract.address)
    // const transactionReceipt = await contract.deployTransaction.wait(1);
    // console.log("Here is the deployment transaction (transaction response):")
    // console.log(contract.deployTransaction);
    // console.log("Transaction receipt")
    // console.log(transactionReceipt)

    const currentFavouriteNumber = await contract.retrieve()
    console.log(currentFavouriteNumber.toString())
    const transactionResponse = await contract.store("7")
    await transactionResponse.wait(1)
    const updatedFavouriteNumber = await contract.retrieve()
    console.log(updatedFavouriteNumber.toString())

    // Sendina a raw transaction
    // const tx = {
    //     nonce: 0,
    //     gasPrice: 20000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b506107a5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec11461006757806343ede4ae146100855780636057361d146100a35780636f760f41146100bf5780639e7a13ad146100db578063b2ac62ef1461010c575b600080fd5b61006f61013c565b60405161007c9190610391565b60405180910390f35b61008d610145565b60405161009a9190610391565b60405180910390f35b6100bd60048036038101906100b891906103ec565b61014b565b005b6100d960048036038101906100d4919061055f565b610155565b005b6100f560048036038101906100f091906103ec565b6101eb565b604051610103929190610643565b60405180910390f35b61012660048036038101906101219190610673565b6102a7565b6040516101339190610391565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b6000604051806040016040528083815260200184815250905060018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101c09291906102d5565b505050816002846040516101d491906106f8565b908152602001604051809103902081905550505050565b600181815481106101fb57600080fd5b90600052602060002090600202016000915090508060000154908060010180546102249061073e565b80601f01602080910402602001604051908101604052809291908181526020018280546102509061073e565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b5050505050905082565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8280546102e19061073e565b90600052602060002090601f016020900481019282610303576000855561034a565b82601f1061031c57805160ff191683800117855561034a565b8280016001018555821561034a579182015b8281111561034957825182559160200191906001019061032e565b5b509050610357919061035b565b5090565b5b8082111561037457600081600090555060010161035c565b5090565b6000819050919050565b61038b81610378565b82525050565b60006020820190506103a66000830184610382565b92915050565b6000604051905090565b600080fd5b600080fd5b6103c981610378565b81146103d457600080fd5b50565b6000813590506103e6816103c0565b92915050565b600060208284031215610402576104016103b6565b5b6000610410848285016103d7565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61046c82610423565b810181811067ffffffffffffffff8211171561048b5761048a610434565b5b80604052505050565b600061049e6103ac565b90506104aa8282610463565b919050565b600067ffffffffffffffff8211156104ca576104c9610434565b5b6104d382610423565b9050602081019050919050565b82818337600083830152505050565b60006105026104fd846104af565b610494565b90508281526020810184848401111561051e5761051d61041e565b5b6105298482856104e0565b509392505050565b600082601f83011261054657610545610419565b5b81356105568482602086016104ef565b91505092915050565b60008060408385031215610576576105756103b6565b5b600083013567ffffffffffffffff811115610594576105936103bb565b5b6105a085828601610531565b92505060206105b1858286016103d7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105f55780820151818401526020810190506105da565b83811115610604576000848401525b50505050565b6000610615826105bb565b61061f81856105c6565b935061062f8185602086016105d7565b61063881610423565b840191505092915050565b60006040820190506106586000830185610382565b818103602083015261066a818461060a565b90509392505050565b600060208284031215610689576106886103b6565b5b600082013567ffffffffffffffff8111156106a7576106a66103bb565b5b6106b384828501610531565b91505092915050565b600081905092915050565b60006106d2826105bb565b6106dc81856106bc565b93506106ec8185602086016105d7565b80840191505092915050565b600061070482846106c7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061075657607f821691505b6020821081036107695761076861070f565b5b5091905056fea2646970667358221220e64d43c99fe7d5bb99f72b3dcaa66f8a16c3b58bb58a6fb2e3f7d114d941560664736f6c634300080e0033",
    //     chainId: 1337
    // }
    // const signedTxResponse = await wallet.signTransaction(tx);
    // console.log(signedTxResponse)
    // const sendTxResponse = await wallet.sendTransaction(tx);
    // await sendTxResponse.wait(1);
    // console.log(sendTxResponse)
}

main()
